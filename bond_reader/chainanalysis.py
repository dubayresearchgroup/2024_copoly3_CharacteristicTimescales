import json
import io
import numpy as np
import polymerAB

DFT_poly_class = polymerAB.Polymer
DFT_poly_conf = {
    "atom_names": {1:'', 2:'A', 3:'B'},
    "newbond_type": 1
}


class BondReader:
    """Reads LAMMPS simulation dump files and generates a set of collections describing 
    the simulation trajectory and polymerization statistics that can be inserted into the main PyMongo database.
    """
    def __init__(self, filename, poly=DFT_poly_class, conf=DFT_poly_conf):
        self.filename = filename
        self.parse_input = self.inputparser
        self.poly_class = poly
        self.poly_conf = conf
        self.params = None
        self.trajs = {}
        self.frames = []
        self.bondraw = {}

    def insertdb(self, collections):
        """Takes a tuple of 3 PyMongo collections and inserts the calculated simulation parameters (self.param), trajectory frames (self.frames), and simulation trajectory.

        Parameters
        ----------
        collections : tuple of PyMongo collections
            A tuple containing the PyMongo collections holding the collective simulation parameters, frames, and trajectories in that order.
            These PyMongo collection are named input_parameters, snapshots, and kinetic_trajectories in the managed PyMongo database. 
        """
        '''with 3 pymongo collections: (input_parameters, snapshots, kinetic_trajectories)'''
        collections[0].insert_one(self.params)
        collections[1].insert_many(self.frames)
        collections[2].insert_one(self.trajs)

    def inputparser(self, inparam):
        return inparam

    def readtype(self):
        """Reads a dump of atom types from a LAMMPS simulation and saves it as a dictionary mapping atom IDs to their corresponding atom type.
        """
        typefilename = self.filename + '-type'
        tmap = None
        with open(typefilename) as typefile:
        # read atom type of each atom
            s = typefile.read()
            s1 = s.partition('ITEM: ATOMS id type \n')[2]
            typemat = np.genfromtxt(io.BytesIO(s1.encode()),dtype=int)
            #tmap is type map
            tmap = dict(zip(typemat[:,0], typemat[:,1]))
        self.atomtype = tmap

    def readparam(self):
        """Opens the JSON parameter file specified by self.filename and returns it as a dictionary as generated by json.load.
 
        Returns
        -------
        param : dict
            A dictionary mapping simulation parameter names to their corresponding values.
        """
        paramfile = self.filename + '_param.json'
        param = None
        with open(paramfile, 'r') as fp:
            param = json.load(fp)
        return param

    def readbondraw(self):
        """Creates a dictionary mapping all available timesteps in a LAMMPS bond dump file to a numpy array specifying all bonds at that timestep.
        Bonds in the numpy array are represented as rows in the numpy array containing bond type, atom ID of bonded atom 1, and atom ID of bonded atom 2.
        The dictionary is saved as an instance variable self.bondraw 
        """
        self.bondraw = {}
        bondfilename = self.filename + '-bond'
        with open(bondfilename, 'rb') as bondfile:
            while True:
                line = bondfile.readline()
                if line == b"":
                    break
                if line.startswith(b'ITEM: TIMESTEP'):
                    currentstep = int(bondfile.readline().decode())
                elif line.startswith(b'ITEM: NUMBER OF ENTRIES'):
                    nbonds = int(bondfile.readline().decode())
                elif line.startswith(b'ITEM: ENTRIES c_binfo[1] c_binfo[2] c_binfo[3]'):
                    raw = np.genfromtxt(bondfile, max_rows=nbonds, dtype=int)
                    self.bondraw[currentstep] = raw

    def makeparam(self):
        """Reads a JSON parameter file specifying simulation parameters and uses the defined polymer class (default polymerAB.Polymer) to determine the number of A and B monomers.
        All parameters including monomer count are then stored as a dictionary mapping parameter names to values and saved as an instance variable (self.params).
        """
        self.poly_class.setN(self.atomtype, self.poly_conf)
        monomers = self.poly_class.getN()
        params = self.readparam()
        params = self.parse_input(params)
        for i, j in monomers.items():
            params[i] = j
        params['name'] = self.filename
        self.params = params

    def makedata(self):
        """Uses bond data created with readbondraw method to create step by step polymerization info generated by the polymerization classes getrecord and gettraj methods.
        The data is saved as a dictionary with an entry for each variable mapping to a list containing an entry for every timestep.
        """
        for step in self.bondraw:
            bonddata = self.poly_class(self.bondraw[step], self.atomtype, self.poly_conf)
            bonddata.calc()

            frame = bonddata.getrecord()
            frame['step'] = step
            frame['name'] = self.params['name']
            self.frames.append(frame)

            traj = bonddata.gettraj()
            traj['step'] = step
            for item in traj:
                if item not in self.trajs:
                    self.trajs[item] = [traj[item]]
                else:
                    self.trajs[item].append(traj[item])
        
        self.trajs['name'] = self.params['name']

    def calc(self):
        """Performs analysis of simulation files given by self.filename and saves results as instance variables.
        This method generates all data needed for insertion into the current PyMongo database.
        """
        self.readtype()
        self.readbondraw()
        self.makeparam()
        self.makedata()
